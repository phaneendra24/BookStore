generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mybooks       Books[]
  wishlist      wishlist[]
}

model Orders {
  id        String      @id @default(cuid())
  orderid   String
  senderId  String
  bookid    String
  createdAt DateTime    @default(now())
  status    orderstatus @default(UNSOLD)
}

model Books {
  id         String     @id @default(cuid())
  bookid     String
  bookName   String
  synopsis   String
  genre      String
  pages      Int
  price      Int
  authorname String
  createdAt  DateTime   @default(now())
  owner      User       @relation(fields: [bookid], references: [id])
  wishlist   wishlist[]

  @@index([bookid])
}

model wishlist {
  bookId String
  userId String
  books  Books  @relation(fields: [bookId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([bookId, userId])
  @@index([userId])
  @@index([bookId])
}

enum orderstatus {
  SOLD
  PENDING
  UNSOLD
}
